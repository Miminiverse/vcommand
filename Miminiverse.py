{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "listening\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from webdriver_manager.chrome import ChromeDriverManager\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.support.ui import WebDriverWait \n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "from time import sleep\n",
    "import pyttsx3 as p\n",
    "import datetime\n",
    "import speech_recognition as sr\n",
    "\n",
    "class Login():\n",
    "    def __init__(self):\n",
    "        self.driver = webdriver.Chrome(ChromeDriverManager().install())\n",
    "\n",
    "    def login(self):\n",
    "        self.driver.get('http://127.0.0.1:8000/')\n",
    "        search = self.driver.find_element(By.XPATH, '//input[@name=\"username\"]')\n",
    "        search.send_keys('mimipretty')\n",
    "        password = self.driver.find_element(By.XPATH, '//input[@name=\"password\"]')\n",
    "        password.send_keys('poiu1234')\n",
    "        sleep(2)\n",
    "        login = self.driver.find_element(By.XPATH, '//input[@value=\"Login\"]')\n",
    "        login.click()\n",
    "    \n",
    "    def create_post(self):\n",
    "        self.driver.get('http://127.0.0.1:8000/')\n",
    "        createpost = driver.find_element(By.ID, 'create-post')\n",
    "        createpost.click()\n",
    "\n",
    "\n",
    "engine = p.init()\n",
    "rate=engine.getProperty('rate')\n",
    "engine.setProperty('rate', 180)\n",
    "\n",
    "\n",
    "def speak(text):\n",
    "    engine.say(text)\n",
    "    engine.runAndWait()\n",
    "speak(\"Hello mimi, I am your assistant. How can I help you?\")\n",
    "\n",
    "r = sr.Recognizer()\n",
    "\n",
    "with sr.Microphone() as source:\n",
    "    r.energy_threshold=10000\n",
    "    r.adjust_for_ambient_noise(source, 1.2)\n",
    "    print(\"listening\")\n",
    "    audio = r.listen(source)\n",
    "    text1 = r.recognize_google(audio)\n",
    "\n",
    "if \"login\" in text1:\n",
    "    login = Login()\n",
    "    login.login()\n",
    "\n",
    "    speak(\"You are logged in. What do you want to do?\")\n",
    "    with sr.Microphone() as source:\n",
    "        r.energy_threshold=10000\n",
    "        r.adjust_for_ambient_noise(source, 1.2)\n",
    "        print(\"listening\")\n",
    "        audio = r.listen(source)\n",
    "        text2 = r.recognize_google(audio)\n",
    "\n",
    "    if \"post\" in text2:\n",
    "\n",
    "        login.create_post()\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "listening\n"
     ]
    },
    {
     "ename": "UnknownValueError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mUnknownValueError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32mc:\\Users\\MINH TAM PHAM\\Desktop\\VoiceCommand\\Miminiverse.ipynb Cell 2\u001b[0m in \u001b[0;36m<cell line: 89>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/MINH%20TAM%20PHAM/Desktop/VoiceCommand/Miminiverse.ipynb#W1sZmlsZQ%3D%3D?line=91'>92</a>\u001b[0m     \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mlistening\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/MINH%20TAM%20PHAM/Desktop/VoiceCommand/Miminiverse.ipynb#W1sZmlsZQ%3D%3D?line=92'>93</a>\u001b[0m     audio \u001b[39m=\u001b[39m r\u001b[39m.\u001b[39mlisten(source)\n\u001b[1;32m---> <a href='vscode-notebook-cell:/c%3A/Users/MINH%20TAM%20PHAM/Desktop/VoiceCommand/Miminiverse.ipynb#W1sZmlsZQ%3D%3D?line=93'>94</a>\u001b[0m     text3 \u001b[39m=\u001b[39m r\u001b[39m.\u001b[39mrecognize_google(audio)\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/MINH%20TAM%20PHAM/Desktop/VoiceCommand/Miminiverse.ipynb#W1sZmlsZQ%3D%3D?line=95'>96</a>\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39m\"\u001b[39m\u001b[39mlog in\u001b[39m\u001b[39m\"\u001b[39m \u001b[39min\u001b[39;00m text3:\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/MINH%20TAM%20PHAM/Desktop/VoiceCommand/Miminiverse.ipynb#W1sZmlsZQ%3D%3D?line=96'>97</a>\u001b[0m     login \u001b[39m=\u001b[39m Login()\n",
      "File \u001b[1;32md:\\Anaconda\\envs\\Mimi\\lib\\site-packages\\speech_recognition\\__init__.py:858\u001b[0m, in \u001b[0;36mRecognizer.recognize_google\u001b[1;34m(self, audio_data, key, language, show_all)\u001b[0m\n\u001b[0;32m    856\u001b[0m \u001b[39m# return results\u001b[39;00m\n\u001b[0;32m    857\u001b[0m \u001b[39mif\u001b[39;00m show_all: \u001b[39mreturn\u001b[39;00m actual_result\n\u001b[1;32m--> 858\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39misinstance\u001b[39m(actual_result, \u001b[39mdict\u001b[39m) \u001b[39mor\u001b[39;00m \u001b[39mlen\u001b[39m(actual_result\u001b[39m.\u001b[39mget(\u001b[39m\"\u001b[39m\u001b[39malternative\u001b[39m\u001b[39m\"\u001b[39m, [])) \u001b[39m==\u001b[39m \u001b[39m0\u001b[39m: \u001b[39mraise\u001b[39;00m UnknownValueError()\n\u001b[0;32m    860\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39m\"\u001b[39m\u001b[39mconfidence\u001b[39m\u001b[39m\"\u001b[39m \u001b[39min\u001b[39;00m actual_result[\u001b[39m\"\u001b[39m\u001b[39malternative\u001b[39m\u001b[39m\"\u001b[39m]:\n\u001b[0;32m    861\u001b[0m     \u001b[39m# return alternative with highest confidence score\u001b[39;00m\n\u001b[0;32m    862\u001b[0m     best_hypothesis \u001b[39m=\u001b[39m \u001b[39mmax\u001b[39m(actual_result[\u001b[39m\"\u001b[39m\u001b[39malternative\u001b[39m\u001b[39m\"\u001b[39m], key\u001b[39m=\u001b[39m\u001b[39mlambda\u001b[39;00m alternative: alternative[\u001b[39m\"\u001b[39m\u001b[39mconfidence\u001b[39m\u001b[39m\"\u001b[39m])\n",
      "\u001b[1;31mUnknownValueError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import os\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from webdriver_manager.chrome import ChromeDriverManager\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.support.ui import WebDriverWait \n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "from time import sleep\n",
    "import pyttsx3 as p\n",
    "import datetime\n",
    "import speech_recognition as sr\n",
    "\n",
    "\"\"\"\n",
    "class info():\n",
    "    def __init__(self):\n",
    "        self.driver = webdriver.Chrome(ChromeDriverManager().install())\n",
    "\n",
    "    def get_info(self, query):\n",
    "        self.query=query\n",
    "        self.driver.get('https://www.wikipedia.org/')\n",
    "        search = self.driver.find_element(By.ID, 'searchInput')\n",
    "        search.send_keys(query)\n",
    "        sleep(2)\n",
    "        button = self.driver.find_element(By.CLASS_NAME, 'pure-button-primary-progressive')\n",
    "        button.click()\n",
    "        #content =      \n",
    "\n",
    "\n",
    "\n",
    "class music():\n",
    "    def __init__(self):\n",
    "        self.driver = webdriver.Chrome(ChromeDriverManager().install())\n",
    "\n",
    "    def play(self, query):\n",
    "        self.query = query\n",
    "        self.driver.get('https://www.youtube.com/results?search_query=' + query )\n",
    "        video = self.driver.find_element(By.CLASS_NAME, \"ytd-video-renderer\")\n",
    "        video.click()\n",
    "        #sleep(2)\n",
    "        #button = self.driver.find_element(By.ID, 'search-icon-legacy')\n",
    "        #button.click()\n",
    "        #content =      \n",
    "\n",
    "\n",
    "class Led():\n",
    "    def __init__(self):\n",
    "        self.driver = webdriver.Chrome(ChromeDriverManager().install())  \n",
    "\n",
    "\n",
    "    def turn_on(self):\n",
    "        self.driver.get('http://127.0.0.1:8000/d7/')\n",
    "        video = self.driver.find_element(By.ID, \"ledOnButton\")\n",
    "        video.click()   \n",
    "    def turn_off(self):\n",
    "        self.driver.get('http://127.0.0.1:8000/d7/')\n",
    "        video = self.driver.find_element(By.ID, \"ledOffButton\")\n",
    "        video.click()\n",
    "\"\"\"\n",
    "\n",
    "class Login():\n",
    "    def __init__(self):\n",
    "        self.driver = webdriver.Chrome(ChromeDriverManager().install())\n",
    "\n",
    "    def loginn(self):\n",
    "\n",
    "        self.driver.get('http://127.0.0.1:8000/')\n",
    "        search = self.driver.find_element(By.XPATH, '//input[@name=\"username\"]')\n",
    "        search.send_keys('mimipretty')\n",
    "        password = self.driver.find_element(By.XPATH, '//input[@name=\"password\"]')\n",
    "        password.send_keys('poiu1234')\n",
    "        sleep(2)\n",
    "        login = self.driver.find_element(By.XPATH, '//input[@value=\"Login\"]')\n",
    "        login.click()\n",
    "\n",
    "\n",
    "\n",
    "engine = p.init()\n",
    "rate=engine.getProperty('rate')\n",
    "engine.setProperty('rate', 180)\n",
    "\n",
    "\n",
    "def speak(text):\n",
    "    engine.say(text)\n",
    "    engine.runAndWait()\n",
    "\n",
    "speak(\"Hello mimi, I am your assistant. How can I help you?\")\n",
    "\n",
    "r = sr.Recognizer()\n",
    "with sr.Microphone() as source:\n",
    "    r.energy_threshold=10000\n",
    "    r.adjust_for_ambient_noise(source, 1.2)\n",
    "    print(\"listening\")\n",
    "    audio = r.listen(source)\n",
    "    text3 = r.recognize_google(audio)\n",
    "\n",
    "if \"log in\" in text3:\n",
    "    login = Login()\n",
    "    login.loginn()\n",
    "        \n",
    "\n",
    "\n",
    "        \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.4 ('Mimi')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "ed3af5a56fa7073acdb89b31edc62ced980dabefb525042e2d2b94296569fe03"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
